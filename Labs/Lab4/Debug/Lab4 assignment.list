
Lab4 assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000005f0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000784  0800078c  0001078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000784  08000784  0001078c  2**0
                  CONTENTS
  4 .ARM          00000000  08000784  08000784  0001078c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000784  0800078c  0001078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000784  08000784  00010784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000788  08000788  00010788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001078c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  0800078c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  0800078c  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001078c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000c53  00000000  00000000  000107bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000347  00000000  00000000  0001140f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00011758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000070  00000000  00000000  00011800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000dffb  00000000  00000000  00011870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000011f4  00000000  00000000  0001f86b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0004fc9d  00000000  00000000  00020a5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000706fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000164  00000000  00000000  00070750  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800076c 	.word	0x0800076c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	0800076c 	.word	0x0800076c

080001d4 <GPIO_Init>:
 */
#include "GPIO.h"
#include "stm32f401xc.h"
#include "stm32f401cc_interface.h"
void GPIO_Init( char Port, unsigned int PIN_NO, unsigned int PIN_Dir, unsigned int Default_State)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	60b9      	str	r1, [r7, #8]
 80001dc:	607a      	str	r2, [r7, #4]
 80001de:	603b      	str	r3, [r7, #0]
 80001e0:	4603      	mov	r3, r0
 80001e2:	73fb      	strb	r3, [r7, #15]
	//enable clock of port
	switch (Port)
 80001e4:	7bfb      	ldrb	r3, [r7, #15]
 80001e6:	2b41      	cmp	r3, #65	; 0x41
 80001e8:	d003      	beq.n	80001f2 <GPIO_Init+0x1e>
 80001ea:	2b42      	cmp	r3, #66	; 0x42
 80001ec:	f000 8085 	beq.w	80002fa <GPIO_Init+0x126>
				}// end switch

		break;
	}

}
 80001f0:	e10a      	b.n	8000408 <GPIO_Init+0x234>
				RCC_AHB1ENR |= (0x01 <<0);
 80001f2:	4b88      	ldr	r3, [pc, #544]	; (8000414 <GPIO_Init+0x240>)
 80001f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80001f6:	4a87      	ldr	r2, [pc, #540]	; (8000414 <GPIO_Init+0x240>)
 80001f8:	f043 0301 	orr.w	r3, r3, #1
 80001fc:	6313      	str	r3, [r2, #48]	; 0x30
 80001fe:	687b      	ldr	r3, [r7, #4]
 8000200:	2b03      	cmp	r3, #3
 8000202:	f200 80fe 	bhi.w	8000402 <GPIO_Init+0x22e>
 8000206:	a201      	add	r2, pc, #4	; (adr r2, 800020c <GPIO_Init+0x38>)
 8000208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800020c:	0800021d 	.word	0x0800021d
 8000210:	08000275 	.word	0x08000275
 8000214:	080002c9 	.word	0x080002c9
 8000218:	080002e1 	.word	0x080002e1
							GPIOA_MODER &= ~(0x03 << 2*PIN_NO);
 800021c:	4b7e      	ldr	r3, [pc, #504]	; (8000418 <GPIO_Init+0x244>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	68ba      	ldr	r2, [r7, #8]
 8000222:	0052      	lsls	r2, r2, #1
 8000224:	2103      	movs	r1, #3
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	43d2      	mvns	r2, r2
 800022c:	4611      	mov	r1, r2
 800022e:	4a7a      	ldr	r2, [pc, #488]	; (8000418 <GPIO_Init+0x244>)
 8000230:	400b      	ands	r3, r1
 8000232:	6013      	str	r3, [r2, #0]
 8000234:	683b      	ldr	r3, [r7, #0]
 8000236:	2b01      	cmp	r3, #1
 8000238:	d003      	beq.n	8000242 <GPIO_Init+0x6e>
 800023a:	683b      	ldr	r3, [r7, #0]
 800023c:	2b02      	cmp	r3, #2
 800023e:	d00c      	beq.n	800025a <GPIO_Init+0x86>
					break;
 8000240:	e05a      	b.n	80002f8 <GPIO_Init+0x124>
					       		GPIOA_PUPDR |= (0x01<<2*PIN_NO);
 8000242:	4b75      	ldr	r3, [pc, #468]	; (8000418 <GPIO_Init+0x244>)
 8000244:	68db      	ldr	r3, [r3, #12]
 8000246:	68ba      	ldr	r2, [r7, #8]
 8000248:	0052      	lsls	r2, r2, #1
 800024a:	2101      	movs	r1, #1
 800024c:	fa01 f202 	lsl.w	r2, r1, r2
 8000250:	4611      	mov	r1, r2
 8000252:	4a71      	ldr	r2, [pc, #452]	; (8000418 <GPIO_Init+0x244>)
 8000254:	430b      	orrs	r3, r1
 8000256:	60d3      	str	r3, [r2, #12]
					          break;
 8000258:	e00b      	b.n	8000272 <GPIO_Init+0x9e>
					        	GPIOA_PUPDR |= (0x02<<2*PIN_NO);
 800025a:	4b6f      	ldr	r3, [pc, #444]	; (8000418 <GPIO_Init+0x244>)
 800025c:	68db      	ldr	r3, [r3, #12]
 800025e:	68ba      	ldr	r2, [r7, #8]
 8000260:	0052      	lsls	r2, r2, #1
 8000262:	2102      	movs	r1, #2
 8000264:	fa01 f202 	lsl.w	r2, r1, r2
 8000268:	4611      	mov	r1, r2
 800026a:	4a6b      	ldr	r2, [pc, #428]	; (8000418 <GPIO_Init+0x244>)
 800026c:	430b      	orrs	r3, r1
 800026e:	60d3      	str	r3, [r2, #12]
					          break;
 8000270:	bf00      	nop
					break;
 8000272:	e041      	b.n	80002f8 <GPIO_Init+0x124>
							GPIOA_MODER |= (0x01 << 2*PIN_NO);
 8000274:	4b68      	ldr	r3, [pc, #416]	; (8000418 <GPIO_Init+0x244>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	68ba      	ldr	r2, [r7, #8]
 800027a:	0052      	lsls	r2, r2, #1
 800027c:	2101      	movs	r1, #1
 800027e:	fa01 f202 	lsl.w	r2, r1, r2
 8000282:	4611      	mov	r1, r2
 8000284:	4a64      	ldr	r2, [pc, #400]	; (8000418 <GPIO_Init+0x244>)
 8000286:	430b      	orrs	r3, r1
 8000288:	6013      	str	r3, [r2, #0]
 800028a:	683b      	ldr	r3, [r7, #0]
 800028c:	2b00      	cmp	r3, #0
 800028e:	d003      	beq.n	8000298 <GPIO_Init+0xc4>
 8000290:	683b      	ldr	r3, [r7, #0]
 8000292:	2b01      	cmp	r3, #1
 8000294:	d00c      	beq.n	80002b0 <GPIO_Init+0xdc>
					break;
 8000296:	e02f      	b.n	80002f8 <GPIO_Init+0x124>
										GPIOA_OTYPER &= ~(0x01<<PIN_NO);
 8000298:	4b5f      	ldr	r3, [pc, #380]	; (8000418 <GPIO_Init+0x244>)
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	2101      	movs	r1, #1
 800029e:	68ba      	ldr	r2, [r7, #8]
 80002a0:	fa01 f202 	lsl.w	r2, r1, r2
 80002a4:	43d2      	mvns	r2, r2
 80002a6:	4611      	mov	r1, r2
 80002a8:	4a5b      	ldr	r2, [pc, #364]	; (8000418 <GPIO_Init+0x244>)
 80002aa:	400b      	ands	r3, r1
 80002ac:	6053      	str	r3, [r2, #4]
								break;
 80002ae:	e00a      	b.n	80002c6 <GPIO_Init+0xf2>
										GPIOA_OTYPER |= (0x01<<PIN_NO);
 80002b0:	4b59      	ldr	r3, [pc, #356]	; (8000418 <GPIO_Init+0x244>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	2101      	movs	r1, #1
 80002b6:	68ba      	ldr	r2, [r7, #8]
 80002b8:	fa01 f202 	lsl.w	r2, r1, r2
 80002bc:	4611      	mov	r1, r2
 80002be:	4a56      	ldr	r2, [pc, #344]	; (8000418 <GPIO_Init+0x244>)
 80002c0:	430b      	orrs	r3, r1
 80002c2:	6053      	str	r3, [r2, #4]
								break;
 80002c4:	bf00      	nop
					break;
 80002c6:	e017      	b.n	80002f8 <GPIO_Init+0x124>
							GPIOA_MODER |= (0x02 << 2*PIN_NO);
 80002c8:	4b53      	ldr	r3, [pc, #332]	; (8000418 <GPIO_Init+0x244>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	68ba      	ldr	r2, [r7, #8]
 80002ce:	0052      	lsls	r2, r2, #1
 80002d0:	2102      	movs	r1, #2
 80002d2:	fa01 f202 	lsl.w	r2, r1, r2
 80002d6:	4611      	mov	r1, r2
 80002d8:	4a4f      	ldr	r2, [pc, #316]	; (8000418 <GPIO_Init+0x244>)
 80002da:	430b      	orrs	r3, r1
 80002dc:	6013      	str	r3, [r2, #0]
					break;
 80002de:	e00b      	b.n	80002f8 <GPIO_Init+0x124>
							GPIOA_MODER |= (0x03 << 2*PIN_NO);
 80002e0:	4b4d      	ldr	r3, [pc, #308]	; (8000418 <GPIO_Init+0x244>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	68ba      	ldr	r2, [r7, #8]
 80002e6:	0052      	lsls	r2, r2, #1
 80002e8:	2103      	movs	r1, #3
 80002ea:	fa01 f202 	lsl.w	r2, r1, r2
 80002ee:	4611      	mov	r1, r2
 80002f0:	4a49      	ldr	r2, [pc, #292]	; (8000418 <GPIO_Init+0x244>)
 80002f2:	430b      	orrs	r3, r1
 80002f4:	6013      	str	r3, [r2, #0]
					break;
 80002f6:	bf00      	nop
		break;
 80002f8:	e083      	b.n	8000402 <GPIO_Init+0x22e>
				RCC_AHB1ENR |= (0x01 <<1);
 80002fa:	4b46      	ldr	r3, [pc, #280]	; (8000414 <GPIO_Init+0x240>)
 80002fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fe:	4a45      	ldr	r2, [pc, #276]	; (8000414 <GPIO_Init+0x240>)
 8000300:	f043 0302 	orr.w	r3, r3, #2
 8000304:	6313      	str	r3, [r2, #48]	; 0x30
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	2b03      	cmp	r3, #3
 800030a:	d87c      	bhi.n	8000406 <GPIO_Init+0x232>
 800030c:	a201      	add	r2, pc, #4	; (adr r2, 8000314 <GPIO_Init+0x140>)
 800030e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000312:	bf00      	nop
 8000314:	08000325 	.word	0x08000325
 8000318:	0800037d 	.word	0x0800037d
 800031c:	080003d1 	.word	0x080003d1
 8000320:	080003e9 	.word	0x080003e9
							GPIOB_MODER &= ~(0x03 << 2*PIN_NO);
 8000324:	4b3d      	ldr	r3, [pc, #244]	; (800041c <GPIO_Init+0x248>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	68ba      	ldr	r2, [r7, #8]
 800032a:	0052      	lsls	r2, r2, #1
 800032c:	2103      	movs	r1, #3
 800032e:	fa01 f202 	lsl.w	r2, r1, r2
 8000332:	43d2      	mvns	r2, r2
 8000334:	4611      	mov	r1, r2
 8000336:	4a39      	ldr	r2, [pc, #228]	; (800041c <GPIO_Init+0x248>)
 8000338:	400b      	ands	r3, r1
 800033a:	6013      	str	r3, [r2, #0]
 800033c:	683b      	ldr	r3, [r7, #0]
 800033e:	2b01      	cmp	r3, #1
 8000340:	d003      	beq.n	800034a <GPIO_Init+0x176>
 8000342:	683b      	ldr	r3, [r7, #0]
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00c      	beq.n	8000362 <GPIO_Init+0x18e>
					break;
 8000348:	e05a      	b.n	8000400 <GPIO_Init+0x22c>
									GPIOB_PUPDR |= (0x01<<2*PIN_NO);
 800034a:	4b34      	ldr	r3, [pc, #208]	; (800041c <GPIO_Init+0x248>)
 800034c:	68db      	ldr	r3, [r3, #12]
 800034e:	68ba      	ldr	r2, [r7, #8]
 8000350:	0052      	lsls	r2, r2, #1
 8000352:	2101      	movs	r1, #1
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	4611      	mov	r1, r2
 800035a:	4a30      	ldr	r2, [pc, #192]	; (800041c <GPIO_Init+0x248>)
 800035c:	430b      	orrs	r3, r1
 800035e:	60d3      	str	r3, [r2, #12]
								break;
 8000360:	e00b      	b.n	800037a <GPIO_Init+0x1a6>
						        	GPIOB_PUPDR |= (0x02<<2*PIN_NO);
 8000362:	4b2e      	ldr	r3, [pc, #184]	; (800041c <GPIO_Init+0x248>)
 8000364:	68db      	ldr	r3, [r3, #12]
 8000366:	68ba      	ldr	r2, [r7, #8]
 8000368:	0052      	lsls	r2, r2, #1
 800036a:	2102      	movs	r1, #2
 800036c:	fa01 f202 	lsl.w	r2, r1, r2
 8000370:	4611      	mov	r1, r2
 8000372:	4a2a      	ldr	r2, [pc, #168]	; (800041c <GPIO_Init+0x248>)
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
					            break;
 8000378:	bf00      	nop
					break;
 800037a:	e041      	b.n	8000400 <GPIO_Init+0x22c>
							GPIOB_MODER |= (0x01 << 2*PIN_NO);
 800037c:	4b27      	ldr	r3, [pc, #156]	; (800041c <GPIO_Init+0x248>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	68ba      	ldr	r2, [r7, #8]
 8000382:	0052      	lsls	r2, r2, #1
 8000384:	2101      	movs	r1, #1
 8000386:	fa01 f202 	lsl.w	r2, r1, r2
 800038a:	4611      	mov	r1, r2
 800038c:	4a23      	ldr	r2, [pc, #140]	; (800041c <GPIO_Init+0x248>)
 800038e:	430b      	orrs	r3, r1
 8000390:	6013      	str	r3, [r2, #0]
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	2b00      	cmp	r3, #0
 8000396:	d003      	beq.n	80003a0 <GPIO_Init+0x1cc>
 8000398:	683b      	ldr	r3, [r7, #0]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d00c      	beq.n	80003b8 <GPIO_Init+0x1e4>
					break;
 800039e:	e02f      	b.n	8000400 <GPIO_Init+0x22c>
											GPIOB_OTYPER &= ~(0x01<<PIN_NO);
 80003a0:	4b1e      	ldr	r3, [pc, #120]	; (800041c <GPIO_Init+0x248>)
 80003a2:	685b      	ldr	r3, [r3, #4]
 80003a4:	2101      	movs	r1, #1
 80003a6:	68ba      	ldr	r2, [r7, #8]
 80003a8:	fa01 f202 	lsl.w	r2, r1, r2
 80003ac:	43d2      	mvns	r2, r2
 80003ae:	4611      	mov	r1, r2
 80003b0:	4a1a      	ldr	r2, [pc, #104]	; (800041c <GPIO_Init+0x248>)
 80003b2:	400b      	ands	r3, r1
 80003b4:	6053      	str	r3, [r2, #4]
									break;
 80003b6:	e00a      	b.n	80003ce <GPIO_Init+0x1fa>
											GPIOB_OTYPER |= (0x01<<PIN_NO);
 80003b8:	4b18      	ldr	r3, [pc, #96]	; (800041c <GPIO_Init+0x248>)
 80003ba:	685b      	ldr	r3, [r3, #4]
 80003bc:	2101      	movs	r1, #1
 80003be:	68ba      	ldr	r2, [r7, #8]
 80003c0:	fa01 f202 	lsl.w	r2, r1, r2
 80003c4:	4611      	mov	r1, r2
 80003c6:	4a15      	ldr	r2, [pc, #84]	; (800041c <GPIO_Init+0x248>)
 80003c8:	430b      	orrs	r3, r1
 80003ca:	6053      	str	r3, [r2, #4]
									break;
 80003cc:	bf00      	nop
					break;
 80003ce:	e017      	b.n	8000400 <GPIO_Init+0x22c>
							GPIOB_MODER |= (0x02 << 2*PIN_NO);
 80003d0:	4b12      	ldr	r3, [pc, #72]	; (800041c <GPIO_Init+0x248>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	68ba      	ldr	r2, [r7, #8]
 80003d6:	0052      	lsls	r2, r2, #1
 80003d8:	2102      	movs	r1, #2
 80003da:	fa01 f202 	lsl.w	r2, r1, r2
 80003de:	4611      	mov	r1, r2
 80003e0:	4a0e      	ldr	r2, [pc, #56]	; (800041c <GPIO_Init+0x248>)
 80003e2:	430b      	orrs	r3, r1
 80003e4:	6013      	str	r3, [r2, #0]
					break;
 80003e6:	e00b      	b.n	8000400 <GPIO_Init+0x22c>
							GPIOB_MODER |= (0x03 << 2*PIN_NO);
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <GPIO_Init+0x248>)
 80003ea:	681b      	ldr	r3, [r3, #0]
 80003ec:	68ba      	ldr	r2, [r7, #8]
 80003ee:	0052      	lsls	r2, r2, #1
 80003f0:	2103      	movs	r1, #3
 80003f2:	fa01 f202 	lsl.w	r2, r1, r2
 80003f6:	4611      	mov	r1, r2
 80003f8:	4a08      	ldr	r2, [pc, #32]	; (800041c <GPIO_Init+0x248>)
 80003fa:	430b      	orrs	r3, r1
 80003fc:	6013      	str	r3, [r2, #0]
					break;
 80003fe:	bf00      	nop
		break;
 8000400:	e001      	b.n	8000406 <GPIO_Init+0x232>
		break;
 8000402:	bf00      	nop
 8000404:	e000      	b.n	8000408 <GPIO_Init+0x234>
		break;
 8000406:	bf00      	nop
}
 8000408:	bf00      	nop
 800040a:	3714      	adds	r7, #20
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40023800 	.word	0x40023800
 8000418:	40020000 	.word	0x40020000
 800041c:	40020400 	.word	0x40020400

08000420 <GPIO_WritePin>:

unsigned char GPIO_WritePin(char Port, unsigned int PIN_NO, unsigned int Data)
{
 8000420:	b480      	push	{r7}
 8000422:	b087      	sub	sp, #28
 8000424:	af00      	add	r7, sp, #0
 8000426:	4603      	mov	r3, r0
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
 800042c:	73fb      	strb	r3, [r7, #15]
	unsigned char result;
	switch(Port)
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	2b41      	cmp	r3, #65	; 0x41
 8000432:	d002      	beq.n	800043a <GPIO_WritePin+0x1a>
 8000434:	2b42      	cmp	r3, #66	; 0x42
 8000436:	d02d      	beq.n	8000494 <GPIO_WritePin+0x74>
 8000438:	e059      	b.n	80004ee <GPIO_WritePin+0xce>
	{
		case('A'):
			if((GPIOA_MODER & (0x03 << 2*PIN_NO)) >> (2*PIN_NO) == 1)
 800043a:	4b30      	ldr	r3, [pc, #192]	; (80004fc <GPIO_WritePin+0xdc>)
 800043c:	681b      	ldr	r3, [r3, #0]
 800043e:	68ba      	ldr	r2, [r7, #8]
 8000440:	0052      	lsls	r2, r2, #1
 8000442:	2103      	movs	r1, #3
 8000444:	fa01 f202 	lsl.w	r2, r1, r2
 8000448:	401a      	ands	r2, r3
 800044a:	68bb      	ldr	r3, [r7, #8]
 800044c:	005b      	lsls	r3, r3, #1
 800044e:	fa22 f303 	lsr.w	r3, r2, r3
 8000452:	2b01      	cmp	r3, #1
 8000454:	d11b      	bne.n	800048e <GPIO_WritePin+0x6e>
			{
			     if(Data)
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d00a      	beq.n	8000472 <GPIO_WritePin+0x52>
			     {
			    	 GPIOA_ODR |= (1<<PIN_NO);
 800045c:	4b27      	ldr	r3, [pc, #156]	; (80004fc <GPIO_WritePin+0xdc>)
 800045e:	695b      	ldr	r3, [r3, #20]
 8000460:	2101      	movs	r1, #1
 8000462:	68ba      	ldr	r2, [r7, #8]
 8000464:	fa01 f202 	lsl.w	r2, r1, r2
 8000468:	4611      	mov	r1, r2
 800046a:	4a24      	ldr	r2, [pc, #144]	; (80004fc <GPIO_WritePin+0xdc>)
 800046c:	430b      	orrs	r3, r1
 800046e:	6153      	str	r3, [r2, #20]
 8000470:	e00a      	b.n	8000488 <GPIO_WritePin+0x68>
			     }
			     else
			     {
			    	 GPIOA_ODR &= ~(1<<PIN_NO);
 8000472:	4b22      	ldr	r3, [pc, #136]	; (80004fc <GPIO_WritePin+0xdc>)
 8000474:	695b      	ldr	r3, [r3, #20]
 8000476:	2101      	movs	r1, #1
 8000478:	68ba      	ldr	r2, [r7, #8]
 800047a:	fa01 f202 	lsl.w	r2, r1, r2
 800047e:	43d2      	mvns	r2, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a1e      	ldr	r2, [pc, #120]	; (80004fc <GPIO_WritePin+0xdc>)
 8000484:	400b      	ands	r3, r1
 8000486:	6153      	str	r3, [r2, #20]
			     }
				result = OK;
 8000488:	2300      	movs	r3, #0
 800048a:	75fb      	strb	r3, [r7, #23]
			}
			else
			{
				result = NOK;
			}
		break;
 800048c:	e02f      	b.n	80004ee <GPIO_WritePin+0xce>
				result = NOK;
 800048e:	2301      	movs	r3, #1
 8000490:	75fb      	strb	r3, [r7, #23]
		break;
 8000492:	e02c      	b.n	80004ee <GPIO_WritePin+0xce>
		case('B'):
				if((GPIOB_MODER & (0x01 << 2*PIN_NO))>> (2*PIN_NO))
 8000494:	4b1a      	ldr	r3, [pc, #104]	; (8000500 <GPIO_WritePin+0xe0>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	68ba      	ldr	r2, [r7, #8]
 800049a:	0052      	lsls	r2, r2, #1
 800049c:	2101      	movs	r1, #1
 800049e:	fa01 f202 	lsl.w	r2, r1, r2
 80004a2:	401a      	ands	r2, r3
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	005b      	lsls	r3, r3, #1
 80004a8:	fa22 f303 	lsr.w	r3, r2, r3
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d01b      	beq.n	80004e8 <GPIO_WritePin+0xc8>
				{
					 if(Data)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	d00a      	beq.n	80004cc <GPIO_WritePin+0xac>
					 {
						 GPIOB_ODR |= (1<<PIN_NO);
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <GPIO_WritePin+0xe0>)
 80004b8:	695b      	ldr	r3, [r3, #20]
 80004ba:	2101      	movs	r1, #1
 80004bc:	68ba      	ldr	r2, [r7, #8]
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <GPIO_WritePin+0xe0>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	e00a      	b.n	80004e2 <GPIO_WritePin+0xc2>
					 }
					 else
					 {
						 GPIOB_ODR &= ~(1<<PIN_NO);
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <GPIO_WritePin+0xe0>)
 80004ce:	695b      	ldr	r3, [r3, #20]
 80004d0:	2101      	movs	r1, #1
 80004d2:	68ba      	ldr	r2, [r7, #8]
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	43d2      	mvns	r2, r2
 80004da:	4611      	mov	r1, r2
 80004dc:	4a08      	ldr	r2, [pc, #32]	; (8000500 <GPIO_WritePin+0xe0>)
 80004de:	400b      	ands	r3, r1
 80004e0:	6153      	str	r3, [r2, #20]
					 }
					result = OK;
 80004e2:	2300      	movs	r3, #0
 80004e4:	75fb      	strb	r3, [r7, #23]
				else
				{
					result = NOK;
				}

		break;
 80004e6:	e001      	b.n	80004ec <GPIO_WritePin+0xcc>
					result = NOK;
 80004e8:	2301      	movs	r3, #1
 80004ea:	75fb      	strb	r3, [r7, #23]
		break;
 80004ec:	bf00      	nop

	}// end switch

	return result;
 80004ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	371c      	adds	r7, #28
 80004f4:	46bd      	mov	sp, r7
 80004f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fa:	4770      	bx	lr
 80004fc:	40020000 	.word	0x40020000
 8000500:	40020400 	.word	0x40020400

08000504 <delay>:
#include "stm32f401cc_interface.h"
#include "GPIO.h"

void delay(int sec){
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	for (int i = 0;i<sec;i++){
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e002      	b.n	8000518 <delay+0x14>
 8000512:	68fb      	ldr	r3, [r7, #12]
 8000514:	3301      	adds	r3, #1
 8000516:	60fb      	str	r3, [r7, #12]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	429a      	cmp	r2, r3
 800051e:	dbf8      	blt.n	8000512 <delay+0xe>
		  }
}
 8000520:	bf00      	nop
 8000522:	bf00      	nop
 8000524:	3714      	adds	r7, #20
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
	...

08000530 <main>:


int main(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	b086      	sub	sp, #24
 8000534:	af00      	add	r7, sp, #0

//	GPIO_Init('B', 3 , INPUT, PULL_UP);
	for (int i =0;i<7;i++)
 8000536:	2300      	movs	r3, #0
 8000538:	617b      	str	r3, [r7, #20]
 800053a:	e008      	b.n	800054e <main+0x1e>
	GPIO_Init('A', i , OUTPUT, PUSH_PULL);
 800053c:	6979      	ldr	r1, [r7, #20]
 800053e:	2300      	movs	r3, #0
 8000540:	2201      	movs	r2, #1
 8000542:	2041      	movs	r0, #65	; 0x41
 8000544:	f7ff fe46 	bl	80001d4 <GPIO_Init>
	for (int i =0;i<7;i++)
 8000548:	697b      	ldr	r3, [r7, #20]
 800054a:	3301      	adds	r3, #1
 800054c:	617b      	str	r3, [r7, #20]
 800054e:	697b      	ldr	r3, [r7, #20]
 8000550:	2b06      	cmp	r3, #6
 8000552:	ddf3      	ble.n	800053c <main+0xc>


    int sec = 1000000;
 8000554:	4b53      	ldr	r3, [pc, #332]	; (80006a4 <main+0x174>)
 8000556:	603b      	str	r3, [r7, #0]
    int cnt = 0;
 8000558:	2300      	movs	r3, #0
 800055a:	613b      	str	r3, [r7, #16]
 800055c:	693b      	ldr	r3, [r7, #16]
 800055e:	2b09      	cmp	r3, #9
 8000560:	d87e      	bhi.n	8000660 <main+0x130>
 8000562:	a201      	add	r2, pc, #4	; (adr r2, 8000568 <main+0x38>)
 8000564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000568:	08000591 	.word	0x08000591
 800056c:	0800059d 	.word	0x0800059d
 8000570:	080005c7 	.word	0x080005c7
 8000574:	080005dd 	.word	0x080005dd
 8000578:	080005f3 	.word	0x080005f3
 800057c:	08000613 	.word	0x08000613
 8000580:	08000629 	.word	0x08000629
 8000584:	08000635 	.word	0x08000635
 8000588:	08000661 	.word	0x08000661
 800058c:	08000655 	.word	0x08000655
	while(1){
		switch(cnt){
		 case(0):
			 GPIO_WritePin('A',6,0x01);
 8000590:	2201      	movs	r2, #1
 8000592:	2106      	movs	r1, #6
 8000594:	2041      	movs	r0, #65	; 0x41
 8000596:	f7ff ff43 	bl	8000420 <GPIO_WritePin>
		 break;
 800059a:	e061      	b.n	8000660 <main+0x130>
		 case(1):
		     GPIO_WritePin('A',0,0x01);
 800059c:	2201      	movs	r2, #1
 800059e:	2100      	movs	r1, #0
 80005a0:	2041      	movs	r0, #65	; 0x41
 80005a2:	f7ff ff3d 	bl	8000420 <GPIO_WritePin>
		     for(int i =3;i<7;i++){
 80005a6:	2303      	movs	r3, #3
 80005a8:	60fb      	str	r3, [r7, #12]
 80005aa:	e008      	b.n	80005be <main+0x8e>
		      GPIO_WritePin('A',i,0x01);
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	2201      	movs	r2, #1
 80005b0:	4619      	mov	r1, r3
 80005b2:	2041      	movs	r0, #65	; 0x41
 80005b4:	f7ff ff34 	bl	8000420 <GPIO_WritePin>
		     for(int i =3;i<7;i++){
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	3301      	adds	r3, #1
 80005bc:	60fb      	str	r3, [r7, #12]
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b06      	cmp	r3, #6
 80005c2:	ddf3      	ble.n	80005ac <main+0x7c>
		     }
		 break;
 80005c4:	e04c      	b.n	8000660 <main+0x130>
		 case(2):
    	    GPIO_WritePin('A',2,0x01);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2102      	movs	r1, #2
 80005ca:	2041      	movs	r0, #65	; 0x41
 80005cc:	f7ff ff28 	bl	8000420 <GPIO_WritePin>
		    GPIO_WritePin('A',5,0x01);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2105      	movs	r1, #5
 80005d4:	2041      	movs	r0, #65	; 0x41
 80005d6:	f7ff ff23 	bl	8000420 <GPIO_WritePin>
		    break;
 80005da:	e041      	b.n	8000660 <main+0x130>
		 case(3):
    	    GPIO_WritePin('A',4,0x01);
 80005dc:	2201      	movs	r2, #1
 80005de:	2104      	movs	r1, #4
 80005e0:	2041      	movs	r0, #65	; 0x41
 80005e2:	f7ff ff1d 	bl	8000420 <GPIO_WritePin>
		    GPIO_WritePin('A',5,0x01);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2105      	movs	r1, #5
 80005ea:	2041      	movs	r0, #65	; 0x41
 80005ec:	f7ff ff18 	bl	8000420 <GPIO_WritePin>
		    break;
 80005f0:	e036      	b.n	8000660 <main+0x130>
		 case(4):
    	    GPIO_WritePin('A',0,0x01);
 80005f2:	2201      	movs	r2, #1
 80005f4:	2100      	movs	r1, #0
 80005f6:	2041      	movs	r0, #65	; 0x41
 80005f8:	f7ff ff12 	bl	8000420 <GPIO_WritePin>
		    GPIO_WritePin('A',3,0x01);
 80005fc:	2201      	movs	r2, #1
 80005fe:	2103      	movs	r1, #3
 8000600:	2041      	movs	r0, #65	; 0x41
 8000602:	f7ff ff0d 	bl	8000420 <GPIO_WritePin>
		    GPIO_WritePin('A',4,0x01);
 8000606:	2201      	movs	r2, #1
 8000608:	2104      	movs	r1, #4
 800060a:	2041      	movs	r0, #65	; 0x41
 800060c:	f7ff ff08 	bl	8000420 <GPIO_WritePin>
		    break;
 8000610:	e026      	b.n	8000660 <main+0x130>
		 case(5):
    	    GPIO_WritePin('A',1,0x01);
 8000612:	2201      	movs	r2, #1
 8000614:	2101      	movs	r1, #1
 8000616:	2041      	movs	r0, #65	; 0x41
 8000618:	f7ff ff02 	bl	8000420 <GPIO_WritePin>
		    GPIO_WritePin('A',4,0x01);
 800061c:	2201      	movs	r2, #1
 800061e:	2104      	movs	r1, #4
 8000620:	2041      	movs	r0, #65	; 0x41
 8000622:	f7ff fefd 	bl	8000420 <GPIO_WritePin>
		    break;
 8000626:	e01b      	b.n	8000660 <main+0x130>
		 case(6):
    	    GPIO_WritePin('A',1,0x01);
 8000628:	2201      	movs	r2, #1
 800062a:	2101      	movs	r1, #1
 800062c:	2041      	movs	r0, #65	; 0x41
 800062e:	f7ff fef7 	bl	8000420 <GPIO_WritePin>
		    break;
 8000632:	e015      	b.n	8000660 <main+0x130>
		 case(7):
		  for(int i =3;i<7;i++){
 8000634:	2303      	movs	r3, #3
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	e008      	b.n	800064c <main+0x11c>
		      GPIO_WritePin('A',i,0x01);
 800063a:	68bb      	ldr	r3, [r7, #8]
 800063c:	2201      	movs	r2, #1
 800063e:	4619      	mov	r1, r3
 8000640:	2041      	movs	r0, #65	; 0x41
 8000642:	f7ff feed 	bl	8000420 <GPIO_WritePin>
		  for(int i =3;i<7;i++){
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3301      	adds	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b06      	cmp	r3, #6
 8000650:	ddf3      	ble.n	800063a <main+0x10a>
		    }
		    break;
 8000652:	e005      	b.n	8000660 <main+0x130>
		 case(8):
		    break;
		 case(9):
    	    GPIO_WritePin('A',4,0x01);
 8000654:	2201      	movs	r2, #1
 8000656:	2104      	movs	r1, #4
 8000658:	2041      	movs	r0, #65	; 0x41
 800065a:	f7ff fee1 	bl	8000420 <GPIO_WritePin>

		    break;
 800065e:	bf00      	nop
		}
		delay(sec);
 8000660:	6838      	ldr	r0, [r7, #0]
 8000662:	f7ff ff4f 	bl	8000504 <delay>
		for (int i = 0;i<7;i++){
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	e008      	b.n	800067e <main+0x14e>
						GPIO_WritePin('A',i,0);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	2200      	movs	r2, #0
 8000670:	4619      	mov	r1, r3
 8000672:	2041      	movs	r0, #65	; 0x41
 8000674:	f7ff fed4 	bl	8000420 <GPIO_WritePin>
		for (int i = 0;i<7;i++){
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	3301      	adds	r3, #1
 800067c:	607b      	str	r3, [r7, #4]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b06      	cmp	r3, #6
 8000682:	ddf3      	ble.n	800066c <main+0x13c>
				}
		cnt = (cnt+1)%10;
 8000684:	693b      	ldr	r3, [r7, #16]
 8000686:	1c5a      	adds	r2, r3, #1
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <main+0x178>)
 800068a:	fb83 1302 	smull	r1, r3, r3, r2
 800068e:	1099      	asrs	r1, r3, #2
 8000690:	17d3      	asrs	r3, r2, #31
 8000692:	1ac9      	subs	r1, r1, r3
 8000694:	460b      	mov	r3, r1
 8000696:	009b      	lsls	r3, r3, #2
 8000698:	440b      	add	r3, r1
 800069a:	005b      	lsls	r3, r3, #1
 800069c:	1ad3      	subs	r3, r2, r3
 800069e:	613b      	str	r3, [r7, #16]
		switch(cnt){
 80006a0:	e75c      	b.n	800055c <main+0x2c>
 80006a2:	bf00      	nop
 80006a4:	000f4240 	.word	0x000f4240
 80006a8:	66666667 	.word	0x66666667

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <SystemInit+0x20>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b6:	4a05      	ldr	r2, [pc, #20]	; (80006cc <SystemInit+0x20>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000ed00 	.word	0xe000ed00

080006d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80006d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000708 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80006d4:	480d      	ldr	r0, [pc, #52]	; (800070c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80006d6:	490e      	ldr	r1, [pc, #56]	; (8000710 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80006d8:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0b      	ldr	r2, [pc, #44]	; (8000718 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80006ec:	4c0b      	ldr	r4, [pc, #44]	; (800071c <LoopFillZerobss+0x26>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80006fa:	f7ff ffd7 	bl	80006ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80006fe:	f000 f811 	bl	8000724 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000702:	f7ff ff15 	bl	8000530 <main>
  bx  lr    
 8000706:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000708:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800070c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000710:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000714:	0800078c 	.word	0x0800078c
  ldr r2, =_sbss
 8000718:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800071c:	2000001c 	.word	0x2000001c

08000720 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000720:	e7fe      	b.n	8000720 <ADC_IRQHandler>
	...

08000724 <__libc_init_array>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	4d0d      	ldr	r5, [pc, #52]	; (800075c <__libc_init_array+0x38>)
 8000728:	4c0d      	ldr	r4, [pc, #52]	; (8000760 <__libc_init_array+0x3c>)
 800072a:	1b64      	subs	r4, r4, r5
 800072c:	10a4      	asrs	r4, r4, #2
 800072e:	2600      	movs	r6, #0
 8000730:	42a6      	cmp	r6, r4
 8000732:	d109      	bne.n	8000748 <__libc_init_array+0x24>
 8000734:	4d0b      	ldr	r5, [pc, #44]	; (8000764 <__libc_init_array+0x40>)
 8000736:	4c0c      	ldr	r4, [pc, #48]	; (8000768 <__libc_init_array+0x44>)
 8000738:	f000 f818 	bl	800076c <_init>
 800073c:	1b64      	subs	r4, r4, r5
 800073e:	10a4      	asrs	r4, r4, #2
 8000740:	2600      	movs	r6, #0
 8000742:	42a6      	cmp	r6, r4
 8000744:	d105      	bne.n	8000752 <__libc_init_array+0x2e>
 8000746:	bd70      	pop	{r4, r5, r6, pc}
 8000748:	f855 3b04 	ldr.w	r3, [r5], #4
 800074c:	4798      	blx	r3
 800074e:	3601      	adds	r6, #1
 8000750:	e7ee      	b.n	8000730 <__libc_init_array+0xc>
 8000752:	f855 3b04 	ldr.w	r3, [r5], #4
 8000756:	4798      	blx	r3
 8000758:	3601      	adds	r6, #1
 800075a:	e7f2      	b.n	8000742 <__libc_init_array+0x1e>
 800075c:	08000784 	.word	0x08000784
 8000760:	08000784 	.word	0x08000784
 8000764:	08000784 	.word	0x08000784
 8000768:	08000788 	.word	0x08000788

0800076c <_init>:
 800076c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800076e:	bf00      	nop
 8000770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000772:	bc08      	pop	{r3}
 8000774:	469e      	mov	lr, r3
 8000776:	4770      	bx	lr

08000778 <_fini>:
 8000778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800077a:	bf00      	nop
 800077c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800077e:	bc08      	pop	{r3}
 8000780:	469e      	mov	lr, r3
 8000782:	4770      	bx	lr
