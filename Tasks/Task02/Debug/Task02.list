
Task02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000288  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  0800041c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000420  08000420  00010420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000424  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000428  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000428  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001587  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000056c  00000000  00000000  000215bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c8  00000000  00000000  00021b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000180  00000000  00000000  00021cf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e174  00000000  00000000  00021e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d4a  00000000  00000000  0002ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dea1  00000000  00000000  00031d2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000afbcf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000554  00000000  00000000  000afc24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000004 	.word	0x20000004
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000404 	.word	0x08000404

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000008 	.word	0x20000008
 80001d0:	08000404 	.word	0x08000404

080001d4 <delay>:
#include "stm32f401cc_interface.h"

void delay(int sec){
 80001d4:	b480      	push	{r7}
 80001d6:	b085      	sub	sp, #20
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
	for (int i = 0;i<sec;i++){
 80001dc:	2300      	movs	r3, #0
 80001de:	60fb      	str	r3, [r7, #12]
 80001e0:	e002      	b.n	80001e8 <delay+0x14>
 80001e2:	68fb      	ldr	r3, [r7, #12]
 80001e4:	3301      	adds	r3, #1
 80001e6:	60fb      	str	r3, [r7, #12]
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	dbf8      	blt.n	80001e2 <delay+0xe>
		  }
}
 80001f0:	bf00      	nop
 80001f2:	bf00      	nop
 80001f4:	3714      	adds	r7, #20
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
	...

08000200 <main>:

int main(void) {
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0

  RCC_AHB1ENR |=1<<1;
 8000206:	4b2b      	ldr	r3, [pc, #172]	; (80002b4 <main+0xb4>)
 8000208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020a:	4a2a      	ldr	r2, [pc, #168]	; (80002b4 <main+0xb4>)
 800020c:	f043 0302 	orr.w	r3, r3, #2
 8000210:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOB_MODER |=42<<9;
 8000212:	4b29      	ldr	r3, [pc, #164]	; (80002b8 <main+0xb8>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a28      	ldr	r2, [pc, #160]	; (80002b8 <main+0xb8>)
 8000218:	f443 43a8 	orr.w	r3, r3, #21504	; 0x5400
 800021c:	6013      	str	r3, [r2, #0]
  GPIOB_OTYPER &= ~(7<<5);
 800021e:	4b26      	ldr	r3, [pc, #152]	; (80002b8 <main+0xb8>)
 8000220:	685b      	ldr	r3, [r3, #4]
 8000222:	4a25      	ldr	r2, [pc, #148]	; (80002b8 <main+0xb8>)
 8000224:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
 8000228:	6053      	str	r3, [r2, #4]
  GPIOB_PUPDR |= 1<<6;
 800022a:	4b23      	ldr	r3, [pc, #140]	; (80002b8 <main+0xb8>)
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	4a22      	ldr	r2, [pc, #136]	; (80002b8 <main+0xb8>)
 8000230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000234:	60d3      	str	r3, [r2, #12]
  int sec = 1000000;
 8000236:	4b21      	ldr	r3, [pc, #132]	; (80002bc <main+0xbc>)
 8000238:	603b      	str	r3, [r7, #0]
  int cnt = 0;
 800023a:	2300      	movs	r3, #0
 800023c:	607b      	str	r3, [r7, #4]
  while (1) {
	  if (GPIOB_IDR & (1<<3)){
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <main+0xb8>)
 8000240:	691b      	ldr	r3, [r3, #16]
 8000242:	f003 0308 	and.w	r3, r3, #8
 8000246:	2b00      	cmp	r3, #0
 8000248:	d028      	beq.n	800029c <main+0x9c>
		  delay(sec/1000);
 800024a:	683b      	ldr	r3, [r7, #0]
 800024c:	4a1c      	ldr	r2, [pc, #112]	; (80002c0 <main+0xc0>)
 800024e:	fb82 1203 	smull	r1, r2, r2, r3
 8000252:	1192      	asrs	r2, r2, #6
 8000254:	17db      	asrs	r3, r3, #31
 8000256:	1ad3      	subs	r3, r2, r3
 8000258:	4618      	mov	r0, r3
 800025a:	f7ff ffbb 	bl	80001d4 <delay>
		  if (GPIOB_IDR & (1<<3)){
 800025e:	4b16      	ldr	r3, [pc, #88]	; (80002b8 <main+0xb8>)
 8000260:	691b      	ldr	r3, [r3, #16]
 8000262:	f003 0308 	and.w	r3, r3, #8
 8000266:	2b00      	cmp	r3, #0
 8000268:	d018      	beq.n	800029c <main+0x9c>
			  cnt = (cnt +1)%8;
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	3301      	adds	r3, #1
 800026e:	425a      	negs	r2, r3
 8000270:	f003 0307 	and.w	r3, r3, #7
 8000274:	f002 0207 	and.w	r2, r2, #7
 8000278:	bf58      	it	pl
 800027a:	4253      	negpl	r3, r2
 800027c:	607b      	str	r3, [r7, #4]
			  GPIOB_ODR &= 0;
 800027e:	4b0e      	ldr	r3, [pc, #56]	; (80002b8 <main+0xb8>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4b0d      	ldr	r3, [pc, #52]	; (80002b8 <main+0xb8>)
 8000284:	2200      	movs	r2, #0
 8000286:	615a      	str	r2, [r3, #20]
			  delay(sec/100);
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	4a0e      	ldr	r2, [pc, #56]	; (80002c4 <main+0xc4>)
 800028c:	fb82 1203 	smull	r1, r2, r2, r3
 8000290:	1152      	asrs	r2, r2, #5
 8000292:	17db      	asrs	r3, r3, #31
 8000294:	1ad3      	subs	r3, r2, r3
 8000296:	4618      	mov	r0, r3
 8000298:	f7ff ff9c 	bl	80001d4 <delay>
		  }
	  }
	  GPIOB_ODR |= cnt<<5;
 800029c:	4b06      	ldr	r3, [pc, #24]	; (80002b8 <main+0xb8>)
 800029e:	695b      	ldr	r3, [r3, #20]
 80002a0:	687a      	ldr	r2, [r7, #4]
 80002a2:	0152      	lsls	r2, r2, #5
 80002a4:	4611      	mov	r1, r2
 80002a6:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <main+0xb8>)
 80002a8:	430b      	orrs	r3, r1
 80002aa:	6153      	str	r3, [r2, #20]
	  delay(sec);
 80002ac:	6838      	ldr	r0, [r7, #0]
 80002ae:	f7ff ff91 	bl	80001d4 <delay>
	  if (GPIOB_IDR & (1<<3)){
 80002b2:	e7c4      	b.n	800023e <main+0x3e>
 80002b4:	40023800 	.word	0x40023800
 80002b8:	40020400 	.word	0x40020400
 80002bc:	000f4240 	.word	0x000f4240
 80002c0:	10624dd3 	.word	0x10624dd3
 80002c4:	51eb851f 	.word	0x51eb851f

080002c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80002cc:	e7fe      	b.n	80002cc <NMI_Handler+0x4>

080002ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80002ce:	b480      	push	{r7}
 80002d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80002d2:	e7fe      	b.n	80002d2 <HardFault_Handler+0x4>

080002d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80002d8:	e7fe      	b.n	80002d8 <MemManage_Handler+0x4>

080002da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80002da:	b480      	push	{r7}
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80002de:	e7fe      	b.n	80002de <BusFault_Handler+0x4>

080002e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80002e4:	e7fe      	b.n	80002e4 <UsageFault_Handler+0x4>

080002e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80002e6:	b480      	push	{r7}
 80002e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002f4:	b480      	push	{r7}
 80002f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002f8:	bf00      	nop
 80002fa:	46bd      	mov	sp, r7
 80002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000300:	4770      	bx	lr

08000302 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000302:	b480      	push	{r7}
 8000304:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000306:	bf00      	nop
 8000308:	46bd      	mov	sp, r7
 800030a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030e:	4770      	bx	lr

08000310 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000314:	f000 f83e 	bl	8000394 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <SystemInit+0x20>)
 8000322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000326:	4a05      	ldr	r2, [pc, #20]	; (800033c <SystemInit+0x20>)
 8000328:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800032c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000340:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000378 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000344:	480d      	ldr	r0, [pc, #52]	; (800037c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000346:	490e      	ldr	r1, [pc, #56]	; (8000380 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000348:	4a0e      	ldr	r2, [pc, #56]	; (8000384 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0b      	ldr	r2, [pc, #44]	; (8000388 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800035c:	4c0b      	ldr	r4, [pc, #44]	; (800038c <LoopFillZerobss+0x26>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800036a:	f7ff ffd7 	bl	800031c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800036e:	f000 f825 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000372:	f7ff ff45 	bl	8000200 <main>
  bx  lr    
 8000376:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000378:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800037c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000380:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000384:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 8000388:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800038c:	20000024 	.word	0x20000024

08000390 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000390:	e7fe      	b.n	8000390 <ADC_IRQHandler>
	...

08000394 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000398:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <HAL_IncTick+0x20>)
 800039a:	781b      	ldrb	r3, [r3, #0]
 800039c:	461a      	mov	r2, r3
 800039e:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <HAL_IncTick+0x24>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4413      	add	r3, r2
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_IncTick+0x24>)
 80003a6:	6013      	str	r3, [r2, #0]
}
 80003a8:	bf00      	nop
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
 80003b2:	bf00      	nop
 80003b4:	20000000 	.word	0x20000000
 80003b8:	20000020 	.word	0x20000020

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	; (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	; (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	; (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	; (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr
